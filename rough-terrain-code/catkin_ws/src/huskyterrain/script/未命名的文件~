#!/usr/bin/env python  
import roslib
import rospy
import tf
import math
from time import time, sleep
from sensor_msgs.msg import Imu
import tf
from sensor_msgs.msg import Image
from sensor_msgs.msg import CameraInfo
import threading
class data_transfer():
	def __init__(self):
		
		
		# Thread
		self.t1 = threading.Thread(target=self.f1,name='t1')
		self.t2 = threading.Thread(target=self.f2,name='t2')
		self.t3 = threading.Thread(target=self.f3,name='t3')
		self.count = 0
		self.threadC = threading.Condition()	
	
		# Pub/Sub
     		pub = rospy.Publisher('camera_Info', CameraInfo, queue_size = 5)
     		pub1 = rospy.Publisher('image_rect', Image, queue_size = 5)
     		rospy.Subscriber('camera/camera_info',CameraInfo,cb1)
    		rospy.Subscriber('/camera/depth/image_raw',Image,cb2)
		self.t1.start()
		self.t2.start()
	def cb1(self,msg):
		tmp1 = Image()
		tmp1 = msg
		pub1.publish(tmp1)
	def cb2(self,msg):
		tmp2 = CameraInfo()
		tmp2 = msg
		pub.publish(tmp2)

	def f1(self):
		self.threadC.acquire()
		self.threadC.wait()
		self.threadC.release()
	def f2(self):
		self.threadC.acquire()
		self.threadC.wait()
		self.threadC.release()
	def f3(self):
		self.threadC.acquire()
		self.control()
		self.threadC.release()
		self.t3 = threading.Thread(target=self.f3,name='t3')
if __name__ == '__main__':
     rospy.init_node('data_transfer_for_openni')
     foo = data_transfer()
     rospy.spin()

