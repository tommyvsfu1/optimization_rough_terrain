#!/usr/bin/env python  
import roslib
import rospy
import tf
import math
from time import time, sleep
from sensor_msgs.msg import Imu
import tf
from sensor_msgs.msg import Image
from sensor_msgs.msg import CameraInfo
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseWithCovarianceStamped
import threading
class data_transfer():
	def __init__(self):
		
		
		# Thread
		self.t1 = threading.Thread(target=self.f1,name='t1')
		self.t2 = threading.Thread(target=self.f2,name='t2')
		self.t3 = threading.Thread(target=self.f3,name='t3')
		self.count = 0
		self.threadC = threading.Condition()	
		self.pub = rospy.Publisher('/set_pose', PoseWithCovarianceStamped, queue_size=50) 
    		rospy.Subscriber('/odometry/filtered ',Odometry,self.cbOdom)
		#self.br = tf.TransformBroadcaster()
		#self.t1.start()
		#self.t2.start()
	def cbOdom(self,msg):
		tmp1 = PoseWithCovarianceStamped()
		tmp1.header = msg.header
		tmp1.pose.pose.position.x = 0
		tmp1.pose.pose.position.y = 0
		tmp1.pose.pose.position.z = 0
		tmp1.pose.pose.orientation.x = 0
		tmp1.pose.pose.orientation.y = 0
		tmp1.pose.pose.orientation.z = 0
		tmp1.pose.pose.orientation.w = 1.0
		tmp1.pose.covariance = msg.pose.covariance
		#tmp1 = msg
		#tmp1.header.frame_id = "odom"
		#self.br.sendTransform((0.0,0.0,0.0),(0.0,0.0,0.0,1.0),rospy.Time.now(),"base_link","odom")
		self.pub.publish(tmp1)
		
	def f1(self):
		self.threadC.acquire()
		self.threadC.wait()
		self.threadC.release()
	def f2(self):
		self.threadC.acquire()
		self.threadC.wait()
		self.threadC.release()
	def f3(self):
		self.threadC.acquire()
		self.control()
		self.threadC.release()
		self.t3 = threading.Thread(target=self.f3,name='t3')
if __name__ == '__main__':
     rospy.init_node('data_transfer')
     foo = data_transfer()
     rospy.spin()

